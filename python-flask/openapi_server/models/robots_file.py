# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.log_inner import LogInner
from openapi_server import util

from openapi_server.models.log_inner import LogInner  # noqa: E501

class RobotsFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url=None, log=None, evaluated_date=None, sitemaps=None):  # noqa: E501
        """RobotsFile - a model defined in OpenAPI

        :param url: The url of this RobotsFile.  # noqa: E501
        :type url: str
        :param log: The log of this RobotsFile.  # noqa: E501
        :type log: List[LogInner]
        :param evaluated_date: The evaluated_date of this RobotsFile.  # noqa: E501
        :type evaluated_date: datetime
        :param sitemaps: The sitemaps of this RobotsFile.  # noqa: E501
        :type sitemaps: List[str]
        """
        self.openapi_types = {
            'url': str,
            'log': List[LogInner],
            'evaluated_date': datetime,
            'sitemaps': List[str]
        }

        self.attribute_map = {
            'url': 'url',
            'log': 'log',
            'evaluated_date': 'evaluated_date',
            'sitemaps': 'sitemaps'
        }

        self._url = url
        self._log = log
        self._evaluated_date = evaluated_date
        self._sitemaps = sitemaps

    @classmethod
    def from_dict(cls, dikt) -> 'RobotsFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RobotsFile of this RobotsFile.  # noqa: E501
        :rtype: RobotsFile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this RobotsFile.

        The URL for the robots.txt file  # noqa: E501

        :return: The url of this RobotsFile.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RobotsFile.

        The URL for the robots.txt file  # noqa: E501

        :param url: The url of this RobotsFile.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def log(self):
        """Gets the log of this RobotsFile.


        :return: The log of this RobotsFile.
        :rtype: List[LogInner]
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this RobotsFile.


        :param log: The log of this RobotsFile.
        :type log: List[LogInner]
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")  # noqa: E501

        self._log = log

    @property
    def evaluated_date(self):
        """Gets the evaluated_date of this RobotsFile.

        The time stamp for when the evaluation of robots.txt  was initiated.   # noqa: E501

        :return: The evaluated_date of this RobotsFile.
        :rtype: datetime
        """
        return self._evaluated_date

    @evaluated_date.setter
    def evaluated_date(self, evaluated_date):
        """Sets the evaluated_date of this RobotsFile.

        The time stamp for when the evaluation of robots.txt  was initiated.   # noqa: E501

        :param evaluated_date: The evaluated_date of this RobotsFile.
        :type evaluated_date: datetime
        """
        if evaluated_date is None:
            raise ValueError("Invalid value for `evaluated_date`, must not be `None`")  # noqa: E501

        self._evaluated_date = evaluated_date

    @property
    def sitemaps(self):
        """Gets the sitemaps of this RobotsFile.

        A list of sitemap URLs retrieved from the robots.txt file   # noqa: E501

        :return: The sitemaps of this RobotsFile.
        :rtype: List[str]
        """
        return self._sitemaps

    @sitemaps.setter
    def sitemaps(self, sitemaps):
        """Sets the sitemaps of this RobotsFile.

        A list of sitemap URLs retrieved from the robots.txt file   # noqa: E501

        :param sitemaps: The sitemaps of this RobotsFile.
        :type sitemaps: List[str]
        """
        if sitemaps is None:
            raise ValueError("Invalid value for `sitemaps`, must not be `None`")  # noqa: E501

        self._sitemaps = sitemaps
